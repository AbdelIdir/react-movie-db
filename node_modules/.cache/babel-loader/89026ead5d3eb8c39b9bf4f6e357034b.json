{"ast":null,"code":"import _slicedToArray from \"/Users/workstation/Desktop/practice/react-rmdb-starterFiles_rev1/Reactt-RMDB /node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { API_URL, API_KEY } from \"../../config\";\nexport const useMovieFetch = movieId => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        error = _useState6[0],\n        setError = _useState6[1];\n\n  const fetchData = useCallback(async () => {\n    setError(false);\n    setLoading(true);\n\n    try {\n      const endpoint = \"\".concat(API_URL, \"movie/\").concat(movieId, \"?api_key=\").concat(API_KEY, \"\\n        \");\n      const result = await (await fetch(endpoint)).json();\n      const creditsEndpoint = \"\".concat(API_URL, \"movie/\").concat(movieId, \"/credits?api_key=\").concat(API_KEY);\n      const creditsResult = await (await fetch(creditsEndpoint)).json();\n      const directors = creditsResult.crew.filter(member => member.job === \"Director\");\n    } catch (error) {\n      setError(true);\n    }\n\n    setLoading(false);\n  }, [movieId]);\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n  return [state, loading, error];\n};","map":{"version":3,"sources":["/Users/workstation/Desktop/practice/react-rmdb-starterFiles_rev1/Reactt-RMDB /src/components/hooks/useMovieFetch.js"],"names":["useState","useEffect","useCallback","API_URL","API_KEY","useMovieFetch","movieId","state","setState","loading","setLoading","error","setError","fetchData","endpoint","result","fetch","json","creditsEndpoint","creditsResult","directors","crew","filter","member","job"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AAEA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,cAAjC;AAEA,OAAO,MAAMC,aAAa,GAAGC,OAAO,IAAI;AAAA,oBACZN,QAAQ,CAAC,EAAD,CADI;AAAA;AAAA,QAC/BO,KAD+B;AAAA,QACxBC,QADwB;;AAAA,qBAERR,QAAQ,CAAC,KAAD,CAFA;AAAA;AAAA,QAE/BS,OAF+B;AAAA,QAEtBC,UAFsB;;AAAA,qBAGZV,QAAQ,CAAC,KAAD,CAHI;AAAA;AAAA,QAG/BW,KAH+B;AAAA,QAGxBC,QAHwB;;AAKtC,QAAMC,SAAS,GAAGX,WAAW,CAAC,YAAY;AACxCU,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACF,YAAMI,QAAQ,aAAMX,OAAN,mBAAsBG,OAAtB,sBAAyCF,OAAzC,eAAd;AAEA,YAAMW,MAAM,GAAG,MAAM,CAAC,MAAMC,KAAK,CAACF,QAAD,CAAZ,EAAwBG,IAAxB,EAArB;AACA,YAAMC,eAAe,aAAMf,OAAN,mBAAsBG,OAAtB,8BAAiDF,OAAjD,CAArB;AACE,YAAMe,aAAa,GAAG,MAAM,CAAC,MAAMH,KAAK,CAACE,eAAD,CAAZ,EAA+BD,IAA/B,EAA5B;AAEA,YAAMG,SAAS,GAAGD,aAAa,CAACE,IAAd,CAAmBC,MAAnB,CACdC,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAe,UADX,CAAlB;AAGH,KAVD,CAUE,OAAOb,KAAP,EAAc;AACdC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;;AACDF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAjB4B,EAiB1B,CAACJ,OAAD,CAjB0B,CAA7B;AAmBAL,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,SAAS;AACV,GAFQ,EAEP,CAACA,SAAD,CAFO,CAAT;AAIA,SAAO,CAACN,KAAD,EAAQE,OAAR,EAAiBE,KAAjB,CAAP;AACD,CA7BM","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\n\nimport { API_URL, API_KEY } from \"../../config\";\n\nexport const useMovieFetch = movieId => {\n  const [state, setState] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const fetchData = useCallback(async () => {\n    setError(false);\n    setLoading(true);\n    try {\n      const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}\n        `;\n      const result = await (await fetch(endpoint)).json();\n      const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n        const creditsResult = await (await fetch(creditsEndpoint)).json();\n        \n        const directors = creditsResult.crew.filter(\n            member => member.job === \"Director\"\n        );\n    } catch (error) {\n      setError(true);\n    }\n    setLoading(false);\n  }, [movieId]);\n\n  useEffect(() => {\n    fetchData();\n  },[fetchData]);\n\n  return [state, loading, error];\n};\n"]},"metadata":{},"sourceType":"module"}